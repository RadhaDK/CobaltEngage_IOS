//
//  AddNewGuestViewController.swift
//  CSSI
//
//  Created by Apple on 27/09/18.
//  Copyright Â© 2018 yujdesigns. All rights reserved.
//

import UIKit
import IQKeyboardManagerSwift
enum PhotoTyoe : Int {
    case PhotoID = 0
    case GuestPhoto = 1
}


class AddNewGuestViewController: UIViewController {
    @IBOutlet weak var txtFirstName: UITextField!
    @IBOutlet weak var btnSwitch: UISwitch!
    @IBOutlet weak var txtLastName: UITextField!
    
    @IBOutlet weak var txtDOB: UITextField!
    @IBOutlet weak var txtRelation: UITextField!
    @IBOutlet weak var txtPhone: UITextField!
    @IBOutlet weak var txtEmail: UITextField!
    @IBOutlet weak var txtVisit: UITextField!
    @IBOutlet weak var txtDuration: UITextField!
    @IBOutlet weak var photoIDContainerView: UIView!
    @IBOutlet weak var guestPhotoContainerView: UIView!
    @IBOutlet weak var photoIDImageView: UIImageView!
    @IBOutlet weak var guestPhotoImageView: UIImageView!
    
    @IBOutlet var lblBottom: UILabel!
    
    var tmpHTMLimage: String!

    fileprivate var calenderNavigationController:UINavigationController? = nil
    fileprivate let appDelegate = UIApplication.shared.delegate as! AppDelegate
    fileprivate var dob:Date? = nil
    fileprivate var visitFromDate: Date? = nil
    fileprivate var selectedRelation: GuestRelation? = nil
    fileprivate var relationPicker: UIPickerView? = nil;
    fileprivate var durationPicker : UIPickerView? = nil;
    fileprivate var selectedWeek: Week? = nil
    fileprivate var imagePicker: UIImagePickerController = UIImagePickerController()
    
    override func viewDidLoad() {
        super.viewDidLoad()

        // Do any additional setup after loading the view.
        txtDOB.setRightIcon(#imageLiteral(resourceName: "icon_calendar_event"))
        txtVisit.setRightIcon(#imageLiteral(resourceName: "icon_calendar_event"))
        
        let datePicker = UIDatePicker()
        datePicker.datePickerMode = .date
        datePicker.setDate(Date(), animated: true)
        datePicker.maximumDate = Date()
        datePicker.addTarget(self, action: #selector(didDOBDateChange(datePicker:)), for: .valueChanged)
        txtDOB.inputView = datePicker
        
        let visitDatePicker = UIDatePicker()
        visitDatePicker.datePickerMode = .date
        visitDatePicker.setDate(Date(), animated: true)
        visitDatePicker.addTarget(self, action: #selector(didVisitDateChanged(datePicker:)), for: .valueChanged)
        txtVisit.inputView = visitDatePicker
        visitDatePicker.minimumDate = Date()
        
        relationPicker = UIPickerView()
        relationPicker?.dataSource = self
        relationPicker?.delegate = self
        txtRelation.inputView = relationPicker
        
        durationPicker = UIPickerView()
        durationPicker?.delegate = self
        durationPicker?.dataSource = self
        txtDuration.inputView = durationPicker
        
        
        self.navigationItem.title = "Guest Card"
        let backButton = UIBarButtonItem()
        
        backButton.title = "Back"
        self.lblBottom.text = String(format: "%@ | %@", UserDefaults.standard.string(forKey: UserDefaultsKeys.username.rawValue)!, self.appDelegate.masterLabeling.hASH! + UserDefaults.standard.string(forKey: UserDefaultsKeys.userID.rawValue)!)

        

        
        self.navigationController!.navigationBar.topItem!.backBarButtonItem = backButton
        
        imagePicker.delegate = self
        
        let photoIDTapGuesture = UITapGestureRecognizer(target: self, action: #selector(onTapPhotoID))
        photoIDImageView.addGestureRecognizer(photoIDTapGuesture)
        
        let guestPhotoTapGuesture = UITapGestureRecognizer(target: self, action: #selector(onTapGuestPhoto))
        guestPhotoImageView.addGestureRecognizer(guestPhotoTapGuesture)
        
        

    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
   
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated) // No need for semicolon
        IQKeyboardManager.shared.previousNextDisplayMode = .alwaysShow
        self.navigationController?.setNavigationBarHidden(false, animated: animated)

    }
    override func viewWillDisappear(_ animated: Bool) {
        IQKeyboardManager.shared.previousNextDisplayMode = .alwaysHide
        
    }
    @IBAction func switchAction(_ sender: Any) {
    }
    
    func uploadImage(img: UIImage){
        
        let imageopicked: UIImage = img
        let imageData: NSData = UIImagePNGRepresentation(imageopicked)! as NSData
        let imageStr = imageData.base64EncodedString(options:.endLineWithCarriageReturn)
        
        
        // insert this into your HTML code
        //        let tmpHTMLimage  = "<img class=\"no-show\" src=\"data:image/png;base64," + imageStr + "\" alt=\"Image\"  height=\"80\" width=\"80\"/>"
        tmpHTMLimage  = "data:image/jpeg;base64," + imageStr
    }
    
    @IBAction func saveClicked(_ sender: Any) {
        guard let _ = dob  else {
            SharedUtlity.sharedHelper().showToast(on: view, withMeassge: "Please select Date of Birth", withDuration: Duration.kShortDuration)
            return
        }
        guard let _ = visitFromDate  else {
            SharedUtlity.sharedHelper().showToast(on: view, withMeassge: "Please select Visit date.", withDuration: Duration.kShortDuration)
            return
        }
        
        guard let _ = relationPicker  else {
            SharedUtlity.sharedHelper().showToast(on: view, withMeassge: "Please select Relation.", withDuration: Duration.kShortDuration)
            return
        }
        
        guard let _ = selectedWeek else {
            SharedUtlity.sharedHelper().showToast(on: view, withMeassge: "Please select Duration.", withDuration: Duration.kShortDuration)
            return
        }
    
        self.appDelegate.showIndicator(withTitle: "", intoView: self.view)

        let params: [String : Any] = [
            APIKeys.kMemberId : UserDefaults.standard.string(forKey: UserDefaultsKeys.userID.rawValue)!,
            APIKeys.kdeviceInfo: APIHandler.devicedict,
            APIKeys.kParentId: UserDefaults.standard.string(forKey: UserDefaultsKeys.parentID.rawValue)!,
            APIKeys.krelation : selectedRelation?.relation ?? "",
            APIKeys.kfirstName : txtFirstName.text ?? "",
            APIKeys.klastName : txtLastName.text ?? "",
            APIKeys.kPhone : txtPhone.text ?? "",
            APIKeys.kemailid : txtEmail.text ?? "",
            APIKeys.kDOB : txtDOB.text ?? "",
            APIKeys.kFromDate : "10/06/2018",
            APIKeys.kDuration : txtDuration.text ?? "",
           "PhotoId": tmpHTMLimage,
           "GuestPhoto": tmpHTMLimage,
            "AccompanyWithMainMember": btnSwitch.isOn ? 1 : 0,
            "GuestID": "",
            "ReceiptNumber": ""
        ]
        
        APIHandler.sharedInstance.requestGuestCard(paramater: params, onSuccess: {_ in 
            if let addNewGuestViewController = UIStoryboard.init(name: "GuestCard", bundle: .main).instantiateViewController(withIdentifier: "ThanksUPdateViewController") as? ThanksUPdateViewController {
                self.appDelegate.hideIndicator()

                self.navigationController?.pushViewController(addNewGuestViewController, animated: true)
            }
            
        }) { (error) in
            SharedUtlity.sharedHelper().showToast(on:self.view, withMeassge:error.localizedDescription, withDuration: Duration.kMediumDuration)
            self.appDelegate.hideIndicator()

        }
        
    }
    
    @objc func didDOBDateChange(datePicker:UIDatePicker) {
        dob = datePicker.date
        txtDOB.text = SharedUtlity.sharedHelper().dateFormatter.string(from: datePicker.date)
    }
    
    @objc func didVisitDateChanged(datePicker: UIDatePicker) {
        visitFromDate = datePicker.date
        txtVisit.text = SharedUtlity.sharedHelper().dateFormatter.string(from: visitFromDate!)
        updateVisitDate()

    }
    @objc func onTapPhotoID() {
        openOptions(type: .PhotoID)
    }
    
    @objc func onTapGuestPhoto() {
        openOptions(type: .GuestPhoto)
    }
    
    fileprivate func updateVisitDate() {
        if let date = visitFromDate {
            var numberOfDaysToAdd = 0
            if selectedWeek?.weak == "1 week" {
                numberOfDaysToAdd = 7
            } else if selectedWeek?.weak == "2 weeks" {
                numberOfDaysToAdd = 14
            }
            
            if let dateFormatter = SharedUtlity.sharedHelper().dateFormatter,
                let toDate = Calendar.current.date(byAdding: .day , value: numberOfDaysToAdd, to: date, wrappingComponents: false),
                numberOfDaysToAdd != 0 {
                txtVisit.text = "\(dateFormatter.string(from: date)) - \(dateFormatter.string(from: toDate))"
            }
        }
    }
    func openOptions(type: PhotoTyoe )
    {
        
        let alert = UIAlertController(title: "Choose Image", message: nil, preferredStyle: .actionSheet)
        alert.addAction(UIAlertAction(title: "Camera", style: .default, handler: { _ in
            self.openCamera(type: type)
        }))
        
        alert.addAction(UIAlertAction(title: "Gallery", style: .default, handler: { _ in
            self.openGallary(type: type)
        }))
        
        alert.addAction(UIAlertAction.init(title: "Cancel", style: .cancel, handler: nil))
        
        self.present(alert, animated: true, completion: nil)
    }
    
    func openCamera(type: PhotoTyoe )
    {
        if(UIImagePickerController .isSourceTypeAvailable(UIImagePickerControllerSourceType.camera))
        {
            imagePicker.view.tag = type.rawValue
            imagePicker.sourceType = .camera
            imagePicker.allowsEditing = true
            self.present(imagePicker, animated: true, completion: nil)
        }
        else
        {
            let alert  = UIAlertController(title: "Warning", message: "You don't have camera", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            self.present(alert, animated: true, completion: nil)
        }
    }
    
    func openGallary(type: PhotoTyoe )
    {
        imagePicker.view.tag = type.rawValue
        imagePicker.sourceType = .photoLibrary
        imagePicker.allowsEditing = true
        self.present(imagePicker, animated: true, completion: nil)
    }
    
    fileprivate func base64EncodedString(image: UIImage?) -> String {
        
        let imageopicked: UIImage = image!
        let imageData: NSData = UIImagePNGRepresentation(imageopicked)! as NSData
        return imageData.base64EncodedString(options:.endLineWithCarriageReturn)
        
        
    }
    


    @IBAction func guestPolicyClicked(_ sender: Any) {
        
        if let addNewGuestViewController = UIStoryboard.init(name: "GuestCard", bundle: .main).instantiateViewController(withIdentifier: "GuestCardPolicyVC") as? GuestCardPolicyVC {
            self.appDelegate.hideIndicator()
            
            self.navigationController?.pushViewController(addNewGuestViewController, animated: true)
        }

    }
}

extension AddNewGuestViewController : UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == txtVisit {
            //            let calender = CalendarDateRangePickerViewController(collectionViewLayout: UICollectionViewFlowLayout())
            //            calender.delegate = self
            //            calenderNavigationController = UINavigationController(rootViewController: calender)
            //            self.navigationController?.present(calenderNavigationController!, animated: true, completion: nil)
        }
    }
}

extension AddNewGuestViewController : UIPickerViewDataSource {
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        if pickerView == relationPicker {
            return appDelegate.arrReleationList.count
        }
        return appDelegate.arrWeeks.count
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        if pickerView == relationPicker {
            return appDelegate.arrReleationList[row].relationname
        }
        return appDelegate.arrWeeks[row].weak
    }
    
}

extension AddNewGuestViewController : UIPickerViewDelegate {
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        if pickerView == relationPicker {
            selectedRelation = appDelegate.arrReleationList[row]
            txtRelation.text = selectedRelation?.relationname
        } else {
            selectedWeek = appDelegate.arrWeeks[row]
            txtDuration.text = selectedWeek?.weak
            updateVisitDate()
        }
    }
}

extension AddNewGuestViewController : UIImagePickerControllerDelegate {
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        dismiss(animated: true, completion: nil)
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        let originalImage = info[UIImagePickerControllerOriginalImage] as? UIImage
        if picker.view.tag == PhotoTyoe.PhotoID.rawValue {
            photoIDImageView.image = originalImage
            self.uploadImage(img: originalImage!)

        } else if (picker.view.tag == PhotoTyoe.GuestPhoto.rawValue) {
            
            guestPhotoImageView.image = originalImage
            self.uploadImage(img: originalImage!)

        }
        dismiss(animated: true, completion: nil)
    }
}

extension AddNewGuestViewController : UINavigationControllerDelegate {
    
}
